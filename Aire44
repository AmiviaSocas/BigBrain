from NeuroneMoteur import NeuroneMoteur
from Synapse import Synapse
from FeedbackCircuit import FeedbackCircuit

class Aire44:
    def __init__(self, motor_neuron_params, synapse_params, feedback_params):
        """
        Modélise l'aire 44, associée à la production du langage et à la planification syntaxique.

        Parameters:
        motor_neuron_params (dict): Paramètres pour les neurones moteurs.
        synapse_params (dict): Paramètres pour les synapses.
        feedback_params (dict): Paramètres pour le circuit de feedback.
        """
        self.neurones_moteurs = [NeuroneMoteur(**motor_neuron_params) for _ in range(140)]
        self.synapses = [Synapse(**synapse_params) for _ in range(140)]
        self.feedback_circuit = FeedbackCircuit(**feedback_params)

    def generer_structure_linguistique(self, input_data):
        """
        Simule la génération de structures linguistiques et la planification du langage dans l'aire 44.

        Parameters:
        input_data (float): Intensité des données linguistiques reçues.
        Returns:
        dict: Réponses des neurones moteurs après planification linguistique.
        """
        reponses = []
        for i, neurone in enumerate(self.neurones_moteurs):
            neurone.receive_input(input_data * 1.2)  # Modulation pour planification linguistique
            response = neurone.activate()
            self.synapses[i].transmit(response)
            reponses.append(response)

        # Ajustement des réponses avec le circuit de feedback
        self.feedback_circuit.apply_feedback(any(reponses))
       
        return {
            "reponses_neurones_moteurs": reponses,
            "adjustment_feedback": self.feedback_circuit.apply_feedback(True)
        }

# Simulation de l'aire 44
def simulate_aire44():
    # Paramètres ajustables pour l'aire 44
    motor_neuron_params = {"threshold": 1.0, "response_strength": 0.8}
    synapse_params = {"weight": 0.6, "neurotransmitter": "dopamine"}
    feedback_params = {"reinforcement_sensitivity": 0.4, "decay_factor": 0.1, "max_strength": 1.7}

    aire44 = Aire44(motor_neuron_params, synapse_params, feedback_params)

    # Simuler des données linguistiques
    data_inputs = [1.0, 1.3, 0.8, 1.4, 1.2]  # Liste des données linguistiques
    for cycle, data in enumerate(data_inputs):
        resultats = aire44.generer_structure_linguistique(data)
        print(f"Cycle {cycle + 1}: Données linguistiques = {data}, Résultats = {resultats}")

# Exécute la simulation
simulate_aire44()
