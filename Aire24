from NeuroneMnésique import NeuroneMnésique
from Synapse import Synapse
from FeedbackCircuit import FeedbackCircuit

class Aire24:
    def __init__(self, emotional_neuron_params, synapse_params, feedback_params):
        """
        Modélise l'aire 24, impliquée dans la régulation émotionnelle et la prise de décision sous stress.

        Parameters:
        emotional_neuron_params (dict): Paramètres pour les neurones émotionnels.
        synapse_params (dict): Paramètres pour les synapses.
        feedback_params (dict): Paramètres pour le circuit de feedback.
        """
        self.neurones_emotionnels = [NeuroneMnésique(**emotional_neuron_params) for _ in range(130)]
        self.synapses = [Synapse(**synapse_params) for _ in range(130)]
        self.feedback_circuit = FeedbackCircuit(**feedback_params)

    def reguler_reponses_emotionnelles(self, input_data):
        """
        Simule la régulation des réponses émotionnelles et la gestion des situations de stress dans l'aire 24.

        Parameters:
        input_data (float): Intensité des données émotionnelles.
        Returns:
        dict: Réponses des neurones émotionnels après traitement.
        """
        reponses = []
        for i, neurone in enumerate(self.neurones_emotionnels):
            neurone.receive_input(input_data * 1.2)  # Modulation pour gestion des émotions
            response = neurone.activate()
            self.synapses[i].transmit(response)
            reponses.append(response)

        # Ajustement des réponses avec le circuit de feedback
        self.feedback_circuit.apply_feedback(any(reponses))
       
        return {
            "reponses_neurones_emotionnels": reponses,
            "adjustment_feedback": self.feedback_circuit.apply_feedback(True)
        }

# Simulation de l'aire 24
def simulate_aire24():
    # Paramètres ajustables pour l'aire 24
    emotional_neuron_params = {"threshold": 1.0, "sensitivity": 0.85}
    synapse_params = {"weight": 0.5, "neurotransmitter": "dopamine"}
    feedback_params = {"reinforcement_sensitivity": 0.4, "decay_factor": 0.1, "max_strength": 1.6}

    aire24 = Aire24(emotional_neuron_params, synapse_params, feedback_params)

    # Simuler des données émotionnelles
    data_inputs = [1.1, 1.3, 0.8, 1.2, 1.0]  # Liste des données pour la régulation émotionnelle
    for cycle, data in enumerate(data_inputs):
        resultats = aire24.reguler_reponses_emotionnelles(data)
        print(f"Cycle {cycle + 1}: Données émotionnelles = {data}, Résultats = {resultats}")

# Exécute la simulation
simulate_aire24()

