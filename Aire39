from NeuroneSensoriel import NeuroneSensoriel
from Synapse import Synapse
from FeedbackCircuit import FeedbackCircuit

class Aire39:
    def __init__(self, associative_neuron_params, synapse_params, feedback_params):
        """
        Modélise l'aire 39, impliquée dans la perception spatiale, le langage, et la compréhension des symboles.

        Parameters:
        associative_neuron_params (dict): Paramètres pour les neurones associatifs.
        synapse_params (dict): Paramètres pour les synapses.
        feedback_params (dict): Paramètres pour le circuit de feedback.
        """
        self.neurones_associatifs = [NeuroneSensoriel(**associative_neuron_params) for _ in range(170)]
        self.synapses = [Synapse(**synapse_params) for _ in range(170)]
        self.feedback_circuit = FeedbackCircuit(**feedback_params)

    def traiter_informations_cognitives(self, input_data):
        """
        Simule le traitement des informations spatiales et symboliques dans l'aire 39.

        Parameters:
        input_data (float): Intensité des données cognitives reçues.
        Returns:
        dict: Réponses des neurones associatifs après analyse des informations spatiales et symboliques.
        """
        reponses = []
        for i, neurone in enumerate(self.neurones_associatifs):
            neurone.receive_input(input_data * 1.05)  # Modulation pour analyse cognitive
            response = neurone.activate()
            self.synapses[i].transmit(response)
            reponses.append(response)

        # Ajustement des réponses avec le circuit de feedback
        self.feedback_circuit.apply_feedback(any(reponses))
       
        return {
            "reponses_neurones_associatifs": reponses,
            "adjustment_feedback": self.feedback_circuit.apply_feedback(True)
        }

# Simulation de l'aire 39
def simulate_aire39():
    # Paramètres ajustables pour l'aire 39
    associative_neuron_params = {"threshold": 1.0, "sensitivity": 0.8}
    synapse_params = {"weight": 0.5, "neurotransmitter": "glutamate"}
    feedback_params = {"reinforcement_sensitivity": 0.25, "decay_factor": 0.1, "max_strength": 1.6}

    aire39 = Aire39(associative_neuron_params, synapse_params, feedback_params)

    # Simuler des données cognitives complexes
    data_inputs = [0.9, 1.2, 0.8, 1.3, 1.0]  # Liste des données cognitives et symboliques
    for cycle, data in enumerate(data_inputs):
        resultats = aire39.traiter_informations_cognitives(data)
        print(f"Cycle {cycle + 1}: Données cognitives = {data}, Résultats = {resultats}")

# Exécute la simulation
simulate_aire39()
