from NeuroneMnésique import NeuroneMnésique
from Synapse import Synapse
from FeedbackCircuit import FeedbackCircuit

class Aire10:
    def __init__(self, planning_neuron_params, synapse_params, feedback_params):
        """
        Modélise l'aire 10, impliquée dans la planification, la pensée abstraite, et la gestion des tâches.

        Parameters:
        planning_neuron_params (dict): Paramètres pour les neurones de planification.
        synapse_params (dict): Paramètres pour les synapses.
        feedback_params (dict): Paramètres pour le circuit de feedback.
        """
        self.neurones_planning = [NeuroneMnésique(**planning_neuron_params) for _ in range(160)]
        self.synapses = [Synapse(**synapse_params) for _ in range(160)]
        self.feedback_circuit = FeedbackCircuit(**feedback_params)

    def gerer_taches_et_planification(self, input_data):
        """
        Simule le traitement des informations de planification et de pensée abstraite dans l'aire 10.

        Parameters:
        input_data (float): Intensité des données de planification et de gestion des tâches reçues.
        Returns:
        dict: Réponses des neurones de planification après traitement des informations.
        """
        reponses = []
        for i, neurone in enumerate(self.neurones_planning):
            neurone.receive_input(input_data * 1.2)  # Modulation pour gestion des tâches
            response = neurone.activate()
            self.synapses[i].transmit(response)
            reponses.append(response)

        # Ajustement des réponses avec le circuit de feedback
        self.feedback_circuit.apply_feedback(any(reponses))
       
        return {
            "reponses_neurones_planning": reponses,
            "adjustment_feedback": self.feedback_circuit.apply_feedback(True)
        }

# Simulation de l'aire 10
def simulate_aire10():
    # Paramètres ajustables pour l'aire 10
    planning_neuron_params = {"threshold": 1.0, "response_strength": 0.85}
    synapse_params = {"weight": 0.5, "neurotransmitter": "dopamine"}
    feedback_params = {"reinforcement_sensitivity": 0.3, "decay_factor": 0.1, "max_strength": 1.7}

    aire10 = Aire10(planning_neuron_params, synapse_params, feedback_params)

    # Simuler des données de planification et de gestion de tâches
    data_inputs = [1.0, 1.3, 0.9, 1.2, 1.1]  # Liste des données de planification et de pensée abstraite
    for cycle, data in enumerate(data_inputs):
        resultats = aire10.gerer_taches_et_planification(data)
        print(f"Cycle {cycle + 1}: Données de planification = {data}, Résultats = {resultats}")

# Exécute la simulation
simulate_aire10()
