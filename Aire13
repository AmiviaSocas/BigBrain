from NeuroneDopaminergique import NeuroneDopaminergique
from Synapse import Synapse
from FeedbackCircuit import FeedbackCircuit

class Aire13:
    def __init__(self, reward_evaluation_neuron_params, synapse_params, feedback_params):
        """
        Modélise l'aire 13, impliquée dans l'évaluation des récompenses et des valeurs motivationnelles.

        Parameters:
        reward_evaluation_neuron_params (dict): Paramètres pour les neurones d'évaluation des récompenses.
        synapse_params (dict): Paramètres pour les synapses.
        feedback_params (dict): Paramètres pour le circuit de feedback.
        """
        self.neurones_evaluation_recompense = [NeuroneDopaminergique(**reward_evaluation_neuron_params) for _ in range(150)]
        self.synapses = [Synapse(**synapse_params) for _ in range(150)]
        self.feedback_circuit = FeedbackCircuit(**feedback_params)

    def evaluer_recompenses(self, input_data):
        """
        Simule l'évaluation des récompenses dans l'aire 13.

        Parameters:
        input_data (float): Intensité des données de récompense.
        Returns:
        dict: Réponses des neurones après traitement.
        """
        reponses = []
        for i, neurone in enumerate(self.neurones_evaluation_recompense):
            neurone.receive_input(input_data * 1.2)  # Modulation pour l'évaluation des récompenses
            response = neurone.activate()
            self.synapses[i].transmit(response)
            reponses.append(response)

        # Ajustement des réponses avec le circuit de feedback
        self.feedback_circuit.apply_feedback(any(reponses))
       
        return {
            "reponses_neurones_evaluation_recompense": reponses,
            "adjustment_feedback": self.feedback_circuit.apply_feedback(True)
        }

# Simulation de l'aire 13
def simulate_aire13():
    # Paramètres ajustables pour l'aire 13
    reward_evaluation_neuron_params = {"threshold": 1.0, "dopamine_release": 1.1, "release_sensitivity": 0.8}
    synapse_params = {"weight": 0.5, "neurotransmitter": "dopamine"}
    feedback_params = {"reinforcement_sensitivity": 0.45, "decay_factor": 0.12, "max_strength": 1.7}

    aire13 = Aire13(reward_evaluation_neuron_params, synapse_params, feedback_params)

    # Simuler des données de récompense
    data_inputs = [1.0, 1.2, 0.9, 1.3, 1.1]  # Liste des données pour l'évaluation des récompenses
    for cycle, data in enumerate(data_inputs):
        resultats = aire13.evaluer_recompenses(data)
        print(f"Cycle {cycle + 1}: Données de récompense = {data}, Résultats = {resultats}")

# Exécute la simulation
simulate_aire13()