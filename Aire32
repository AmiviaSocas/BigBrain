from NeuroneMnésique import NeuroneMnésique
from Synapse import Synapse
from FeedbackCircuit import FeedbackCircuit

class Aire32:
    def __init__(self, decision_neuron_params, synapse_params, feedback_params):
        """
        Modélise l'aire 32, impliquée dans la prise de décision et le contrôle émotionnel.

        Parameters:
        decision_neuron_params (dict): Paramètres pour les neurones de prise de décision.
        synapse_params (dict): Paramètres pour les synapses.
        feedback_params (dict): Paramètres pour le circuit de feedback.
        """
        self.neurones_decision = [NeuroneMnésique(**decision_neuron_params) for _ in range(150)]
        self.synapses = [Synapse(**synapse_params) for _ in range(150)]
        self.feedback_circuit = FeedbackCircuit(**feedback_params)

    def integrer_decision_et_controle_emotionnel(self, input_data):
        """
        Simule la prise de décision et le contrôle émotionnel dans l'aire 32.

        Parameters:
        input_data (float): Intensité des données de décision et de régulation émotionnelle.
        Returns:
        dict: Réponses des neurones de prise de décision après traitement.
        """
        reponses = []
        for i, neurone in enumerate(self.neurones_decision):
            neurone.receive_input(input_data * 1.2)  # Modulation pour la prise de décision et le contrôle émotionnel
            response = neurone.activate()
            self.synapses[i].transmit(response)
            reponses.append(response)

        # Ajustement des réponses avec le circuit de feedback
        self.feedback_circuit.apply_feedback(any(reponses))
       
        return {
            "reponses_neurones_decision": reponses,
            "adjustment_feedback": self.feedback_circuit.apply_feedback(True)
        }

# Simulation de l'aire 32
def simulate_aire32():
    # Paramètres ajustables pour l'aire 32
    decision_neuron_params = {"threshold": 1.0, "sensitivity": 0.9}
    synapse_params = {"weight": 0.5, "neurotransmitter": "dopamine"}
    feedback_params = {"reinforcement_sensitivity": 0.4, "decay_factor": 0.1, "max_strength": 1.7}

    aire32 = Aire32(decision_neuron_params, synapse_params, feedback_params)

    # Simuler des données pour la prise de décision et le contrôle émotionnel
    data_inputs = [1.1, 1.3, 0.8, 1.2, 1.0]  # Liste des données pour la régulation émotionnelle et la prise de décision
    for cycle, data in enumerate(data_inputs):
        resultats = aire32.integrer_decision_et_controle_emotionnel(data)
        print(f"Cycle {cycle + 1}: Données de décision = {data}, Résultats = {resultats}")

# Exécute la simulation
simulate_aire32()
