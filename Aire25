from NeuroneMnésique import NeuroneMnésique
from Synapse import Synapse
from FeedbackCircuit import FeedbackCircuit

class Aire25:
    def __init__(self, mood_neuron_params, synapse_params, feedback_params):
        """
        Modélise l'aire 25, impliquée dans la régulation de l'humeur et les réponses émotionnelles profondes.

        Parameters:
        mood_neuron_params (dict): Paramètres pour les neurones d'humeur.
        synapse_params (dict): Paramètres pour les synapses.
        feedback_params (dict): Paramètres pour le circuit de feedback.
        """
        self.neurones_humeur = [NeuroneMnésique(**mood_neuron_params) for _ in range(120)]
        self.synapses = [Synapse(**synapse_params) for _ in range(120)]
        self.feedback_circuit = FeedbackCircuit(**feedback_params)

    def reguler_humeur_et_emotions(self, input_data):
        """
        Simule la régulation de l'humeur et des réponses émotionnelles profondes dans l'aire 25.

        Parameters:
        input_data (float): Intensité des données émotionnelles profondes.
        Returns:
        dict: Réponses des neurones d'humeur après traitement.
        """
        reponses = []
        for i, neurone in enumerate(self.neurones_humeur):
            neurone.receive_input(input_data * 1.3)  # Modulation pour régulation de l'humeur
            response = neurone.activate()
            self.synapses[i].transmit(response)
            reponses.append(response)

        # Ajustement des réponses avec le circuit de feedback
        self.feedback_circuit.apply_feedback(any(reponses))
       
        return {
            "reponses_neurones_humeur": reponses,
            "adjustment_feedback": self.feedback_circuit.apply_feedback(True)
        }

# Simulation de l'aire 25
def simulate_aire25():
    # Paramètres ajustables pour l'aire 25
    mood_neuron_params = {"threshold": 1.0, "sensitivity": 0.9}
    synapse_params = {"weight": 0.5, "neurotransmitter": "serotonine"}
    feedback_params = {"reinforcement_sensitivity": 0.5, "decay_factor": 0.1, "max_strength": 1.7}

    aire25 = Aire25(mood_neuron_params, synapse_params, feedback_params)

    # Simuler des données émotionnelles profondes
    data_inputs = [1.2, 1.4, 0.8, 1.3, 1.0]  # Liste des données pour la régulation de l'humeur
    for cycle, data in enumerate(data_inputs):
        resultats = aire25.reguler_humeur_et_emotions(data)
        print(f"Cycle {cycle + 1}: Données d'humeur = {data}, Résultats = {resultats}")

# Exécute la simulation
simulate_aire25()
