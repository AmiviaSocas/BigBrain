from NeuroneSensoriel import NeuroneSensoriel
from NeuroneMnésique import NeuroneMnésique
from Synapse import Synapse
from FeedbackCircuit import FeedbackCircuit

class Aire50:
    def __init__(self, integration_neuron_params, synapse_params, feedback_params):
        """
        Modélise l'aire 50, impliquée dans l'intégration des signaux sensoriels complexes avec des réponses émotionnelles et cognitives.

        Parameters:
        integration_neuron_params (dict): Paramètres pour les neurones intégratifs.
        synapse_params (dict): Paramètres pour les synapses.
        feedback_params (dict): Paramètres pour le circuit de feedback.
        """
        self.neurones_integration_complexe = [NeuroneSensoriel(**integration_neuron_params) for _ in range(200)]
        self.synapses = [Synapse(**synapse_params) for _ in range(200)]
        self.feedback_circuit = FeedbackCircuit(**feedback_params)

    def integrer_signaux_combinés(self, sensory_input, emotional_input, cognitive_input):
        """
        Simule l'intégration des signaux sensoriels, émotionnels et cognitifs dans l'aire 50.

        Parameters:
        sensory_input (float): Intensité des données sensorielles.
        emotional_input (float): Intensité des données émotionnelles.
        cognitive_input (float): Intensité des données cognitives.
        Returns:
        dict: Réponses des neurones après traitement.
        """
        combined_input = (
            sensory_input * 0.4 +
            emotional_input * 0.3 +
            cognitive_input * 0.3
        )  # Pondération équilibrée des signaux

        reponses = []
        for i, neurone in enumerate(self.neurones_integration_complexe):
            neurone.receive_input(combined_input)
            response = neurone.activate()
            self.synapses[i].transmit(response)
            reponses.append(response)

        # Ajustement des réponses avec le circuit de feedback
        self.feedback_circuit.apply_feedback(any(reponses))

        return {
            "reponses_neurones_integration_complexe": reponses,
            "adjustment_feedback": self.feedback_circuit.apply_feedback(True)
        }

# Simulation de l'aire 50
def simulate_aire50():
    # Paramètres ajustables pour l'aire 50
    integration_neuron_params = {"threshold": 1.0, "sensitivity": 0.9}
    synapse_params = {"weight": 0.5, "neurotransmitter": "glutamate"}
    feedback_params = {"reinforcement_sensitivity": 0.5, "decay_factor": 0.1, "max_strength": 1.9}

    aire50 = Aire50(integration_neuron_params, synapse_params, feedback_params)

    # Simuler des données combinées
    sensory_inputs = [1.2, 1.0, 1.1, 1.3, 0.9]
    emotional_inputs = [1.0, 0.9, 1.2, 1.1, 1.0]
    cognitive_inputs = [1.1, 1.2, 0.8, 1.3, 1.0]

    for cycle, (sensory, emotional, cognitive) in enumerate(zip(sensory_inputs, emotional_inputs, cognitive_inputs)):
        resultats = aire50.integrer_signaux_combinés(sensory, emotional, cognitive)
        print(f"Cycle {cycle + 1}: Sensoriel = {sensory}, Émotionnel = {emotional}, Cognitif = {cognitive}, Résultats = {resultats}")

# Exécute la simulation
simulate_aire50()