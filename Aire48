from NeuroneMnésique import NeuroneMnésique
from Synapse import Synapse
from FeedbackCircuit import FeedbackCircuit

class Aire48:
    def __init__(self, social_emotional_neuron_params, synapse_params, feedback_params):
        """
        Modélise l'aire 48, impliquée dans le traitement des interactions sociales et des émotions complexes.

        Parameters:
        social_emotional_neuron_params (dict): Paramètres pour les neurones sociaux et émotionnels.
        synapse_params (dict): Paramètres pour les synapses.
        feedback_params (dict): Paramètres pour le circuit de feedback.
        """
        self.neurones_sociaux_emotionnels = [NeuroneMnésique(**social_emotional_neuron_params) for _ in range(160)]
        self.synapses = [Synapse(**synapse_params) for _ in range(160)]
        self.feedback_circuit = FeedbackCircuit(**feedback_params)

    def integrer_interactions_sociales_emotionnelles(self, social_input, emotional_input):
        """
        Simule l'intégration des interactions sociales et émotionnelles dans l'aire 48.

        Parameters:
        social_input (float): Intensité des données sociales.
        emotional_input (float): Intensité des données émotionnelles.
        Returns:
        dict: Réponses des neurones après traitement.
        """
        combined_input = social_input * 0.5 + emotional_input * 0.5  # Pondération équilibrée
        reponses = []
        for i, neurone in enumerate(self.neurones_sociaux_emotionnels):
            neurone.receive_input(combined_input)
            response = neurone.activate()
            self.synapses[i].transmit(response)
            reponses.append(response)

        # Ajustement des réponses avec le circuit de feedback
        self.feedback_circuit.apply_feedback(any(reponses))

        return {
            "reponses_neurones_sociaux_emotionnels": reponses,
            "adjustment_feedback": self.feedback_circuit.apply_feedback(True)
        }

# Simulation de l'aire 48
def simulate_aire48():
    # Paramètres ajustables pour l'aire 48
    social_emotional_neuron_params = {"threshold": 1.0, "sensitivity": 0.9}
    synapse_params = {"weight": 0.5, "neurotransmitter": "glutamate"}
    feedback_params = {"reinforcement_sensitivity": 0.4, "decay_factor": 0.1, "max_strength": 1.6}

    aire48 = Aire48(social_emotional_neuron_params, synapse_params, feedback_params)

    # Simuler des données sociales et émotionnelles
    social_inputs = [1.1, 1.0, 0.9, 1.2, 1.1]
    emotional_inputs = [0.8, 1.1, 1.2, 1.0, 0.9]

    for cycle, (social, emotional) in enumerate(zip(social_inputs, emotional_inputs)):
        resultats = aire48.integrer_interactions_sociales_emotionnelles(social, emotional)
        print(f"Cycle {cycle + 1}: Social = {social}, Émotionnel = {emotional}, Résultats = {resultats}")

# Exécute la simulation
simulate_aire48()