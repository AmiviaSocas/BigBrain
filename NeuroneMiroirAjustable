class :
    def __init__(self, threshold=1.0, imitation_sensitivity=0.5, activation_type='self'):
        """
        Initialise un neurone en miroir ajustable pour imiter et réagir à des actions observées.

        Parameters:
        threshold (float): Seuil d'activation du neurone miroir.
        imitation_sensitivity (float): Sensibilité de l'imitation (pour les actions observées).
        activation_type (str): Type d'activation ('self' pour action propre, 'observed' pour actions observées).
        """
        self.threshold = threshold
        self.membrane_potential = 0.0  # Potentiel de membrane initial
        self.imitation_sensitivity = imitation_sensitivity
        self.activation_type = activation_type
        self.output_signal = 0.0  # Signal de sortie pour transmission

    def receive_input(self, input_signal, observed=False):
        """
        Reçoit un signal d'entrée en fonction du type d'activation.

        Parameters:
        input_signal (float): Signal reçu d'un autre neurone ou de l'environnement.
        observed (bool): Indique si le signal est observé (True) ou propre (False).
        """
        # Appliquer la sensibilité d'imitation si le signal est observé
        if observed and self.activation_type == 'observed':
            input_signal *= self.imitation_sensitivity

        self.membrane_potential += input_signal

    def activate(self):
        """
        Vérifie si le neurone atteint le seuil d'activation.

        Returns:
        float: Signal de sortie (1.0 si activé, 0.0 sinon)
        """
        if self.membrane_potential >= self.threshold:
            self.membrane_potential = 0.0  # Réinitialisation après activation
            self.output_signal = 1.0  # Potentiel d'action généré
        else:
            self.output_signal = 0.0  # Pas de déclenchement

        return self.output_signal

    def __repr__(self):
        """
        Représente le neurone en miroir et son type d'activation pour une identification facile.
        """
        return f"NeuroneMiroirAjustable(activation_type={self.activation_type}, threshold={self.threshold}, imitation_sensitivity={self.imitation_sensitivity})"

# Simulation de neurones en miroir ajustables pour des actions propres et observées
def simulate_neurone_miroir_adjustable():
    # Créer des neurones en miroir pour action propre et action observée
    mirror_neurons = [
        NeuroneMiroirAjustable(threshold=1.0, imitation_sensitivity=0.6, activation_type='self'),
        NeuroneMiroirAjustable(threshold=0.8, imitation_sensitivity=0.5, activation_type='observed')
    ]

    # Simuler des signaux reçus par chaque neurone en miroir
    for neuron in mirror_neurons:
        print(f"\n--- Simulation pour {neuron} ---")
        for cycle in range(3):
            # Signal d'action propre ou observée selon le type d'activation
            input_signal = np.random.rand() * 1.5
            observed = (neuron.activation_type == 'observed')
            neuron.receive_input(input_signal, observed=observed)
            response = neuron.activate()
            print(f"Cycle {cycle}: Signal d'entrée = {input_signal:.2f}, Réponse = {response}")

# Exécuter la simulation
simulate_neurone_miroir_adjustable()
