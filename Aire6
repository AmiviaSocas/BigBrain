from NeuroneMoteur import NeuroneMoteur
from Synapse import Synapse
from Interneurone import Interneurone
from FeedbackCircuit import FeedbackCircuit

class Aire6:
    def __init__(self, motor_neuron_params, synapse_params, interneuron_params, feedback_params):
        """
        Modélise l'aire 6 (aire prémotrice), impliquée dans la planification et la coordination des mouvements.

        Parameters:
        motor_neuron_params (dict): Paramètres pour les neurones moteurs.
        synapse_params (dict): Paramètres pour les synapses.
        interneuron_params (dict): Paramètres pour les interneurones.
        feedback_params (dict): Paramètres pour le circuit de feedback.
        """
        self.neurones_moteurs = [NeuroneMoteur(**motor_neuron_params) for _ in range(120)]
        self.synapses = [Synapse(**synapse_params) for _ in range(120)]
        self.interneurones = [Interneurone(**interneuron_params) for _ in range(30)]
        self.feedback_circuit = FeedbackCircuit(**feedback_params)

    def planifier_mouvement(self, intention_motrice):
        """
        Simule la planification d'un mouvement par l'aire 6.

        Parameters:
        intention_motrice (float): Intensité de l'intention motrice.
        Returns:
        dict: Planification et coordination des réponses.
        """
        reponses = []
        for i, neurone in enumerate(self.neurones_moteurs):
            neurone.receive_input(intention_motrice * 0.8)  # Modulation de l'intention motrice
            response = neurone.activate()
            self.synapses[i].transmit(response)
            reponses.append(response)

        # Modulation et ajustement par les interneurones
        for interneurone in self.interneurones:
            interneurone.receive_input(sum(reponses) / len(reponses))
            interneurone.activate()

        # Coordination et feedback pour ajuster le plan de mouvement
        self.feedback_circuit.apply_feedback(any(reponses))
       
        return {
            "reponses_neurones_moteurs": reponses,
            "adjustment_feedback": self.feedback_circuit.apply_feedback(True)
        }

# Simulation de l'aire 6
def simulate_aire6():
    # Paramètres ajustables pour l'aire 6
    motor_neuron_params = {"threshold": 1.0, "response_strength": 0.85}
    synapse_params = {"weight": 0.55, "neurotransmitter": "acetylcholine"}
    interneuron_params = {"threshold": 0.7}
    feedback_params = {"reinforcement_sensitivity": 0.3, "decay_factor": 0.1, "max_strength": 1.5}

    aire6 = Aire6(motor_neuron_params, synapse_params, interneuron_params, feedback_params)

    # Simuler des intentions motrices
    intentions = [0.8, 1.1, 0.9, 0.6, 1.3]  # Liste des intentions motrices
    for cycle, intention in enumerate(intentions):
        resultats = aire6.planifier_mouvement(intention)
        print(f"Cycle {cycle + 1}: Intention motrice = {intention}, Résultats = {resultats}")

# Exécute la simulation
simulate_aire6()
