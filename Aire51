from NeuroneMnésique import NeuroneMnésique
from NeuroneModulateur import NeuroneModulateur
from Synapse import Synapse
from FeedbackCircuit import FeedbackCircuit

class Aire51:
    def __init__(self, social_modulation_params, synapse_params, feedback_params):
        """
        Modélise l'aire 51, impliquée dans la modulation des comportements sociaux et émotionnels.

        Parameters:
        social_modulation_params (dict): Paramètres pour les neurones de modulation sociale.
        synapse_params (dict): Paramètres pour les synapses.
        feedback_params (dict): Paramètres pour le circuit de feedback.
        """
        self.neurones_modulation = [NeuroneModulateur(**social_modulation_params) for _ in range(150)]
        self.synapses = [Synapse(**synapse_params) for _ in range(150)]
        self.feedback_circuit = FeedbackCircuit(**feedback_params)

    def moduler_interactions_sociales(self, social_input, emotional_input):
        """
        Simule la modulation des interactions sociales et émotionnelles dans l'aire 51.

        Parameters:
        social_input (float): Intensité des données sociales.
        emotional_input (float): Intensité des données émotionnelles.
        Returns:
        dict: Réponses des neurones après traitement.
        """
        combined_input = social_input * 0.6 + emotional_input * 0.4  # Pondération des signaux
        reponses = []
        for i, neurone in enumerate(self.neurones_modulation):
            neurone.receive_input(combined_input)
            response = neurone.activate()
            self.synapses[i].transmit(response)
            reponses.append(response)

        # Ajustement des réponses avec le circuit de feedback
        self.feedback_circuit.apply_feedback(any(reponses))

        return {
            "reponses_neurones_modulation": reponses,
            "adjustment_feedback": self.feedback_circuit.apply_feedback(True)
        }

# Simulation de l'aire 51
def simulate_aire51():
    # Paramètres ajustables pour l'aire 51
    social_modulation_params = {"balance_threshold": 1.0, "adjustment_factor": 0.3}
    synapse_params = {"weight": 0.5, "neurotransmitter": "glutamate"}
    feedback_params = {"reinforcement_sensitivity": 0.4, "decay_factor": 0.15, "max_strength": 1.7}

    aire51 = Aire51(social_modulation_params, synapse_params, feedback_params)

    # Simuler des données sociales et émotionnelles
    social_inputs = [1.1, 1.0, 1.2, 0.9, 1.3]
    emotional_inputs = [0.9, 1.1, 1.0, 1.2, 0.8]

    for cycle, (social, emotional) in enumerate(zip(social_inputs, emotional_inputs)):
        resultats = aire51.moduler_interactions_sociales(social, emotional)
        print(f"Cycle {cycle + 1}: Social = {social}, Émotionnel = {emotional}, Résultats = {resultats}")

# Exécute la simulation
simulate_aire51()