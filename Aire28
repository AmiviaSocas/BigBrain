from NeuroneMnésique import NeuroneMnésique
from Synapse import Synapse
from FeedbackCircuit import FeedbackCircuit

class Aire28:
    def __init__(self, memory_neuron_params, synapse_params, feedback_params):
        """
        Modélise l'aire 28, impliquée dans la mémoire et la navigation spatiale.

        Parameters:
        memory_neuron_params (dict): Paramètres pour les neurones de mémoire spatiale.
        synapse_params (dict): Paramètres pour les synapses.
        feedback_params (dict): Paramètres pour le circuit de feedback.
        """
        self.neurones_memoire_spatiale = [NeuroneMnésique(**memory_neuron_params) for _ in range(150)]
        self.synapses = [Synapse(**synapse_params) for _ in range(150)]
        self.feedback_circuit = FeedbackCircuit(**feedback_params)

    def traiter_informations_memoire_et_navigation(self, input_data):
        """
        Simule le traitement des informations de mémoire et de navigation spatiale dans l'aire 28.

        Parameters:
        input_data (float): Intensité des données de mémoire et de navigation spatiale.
        Returns:
        dict: Réponses des neurones de mémoire spatiale après traitement.
        """
        reponses = []
        for i, neurone in enumerate(self.neurones_memoire_spatiale):
            neurone.receive_input(input_data * 1.2)  # Modulation pour mémoire et navigation spatiale
            response = neurone.activate()
            self.synapses[i].transmit(response)
            reponses.append(response)

        # Ajustement des réponses avec le circuit de feedback
        self.feedback_circuit.apply_feedback(any(reponses))
       
        return {
            "reponses_neurones_memoire_spatiale": reponses,
            "adjustment_feedback": self.feedback_circuit.apply_feedback(True)
        }

# Simulation de l'aire 28
def simulate_aire28():
    # Paramètres ajustables pour l'aire 28
    memory_neuron_params = {"threshold": 1.0, "sensitivity": 0.9}
    synapse_params = {"weight": 0.55, "neurotransmitter": "glutamate"}
    feedback_params = {"reinforcement_sensitivity": 0.4, "decay_factor": 0.1, "max_strength": 1.6}

    aire28 = Aire28(memory_neuron_params, synapse_params, feedback_params)

    # Simuler des données pour la mémoire et la navigation spatiale
    data_inputs = [1.1, 1.3, 0.9, 1.2, 1.0]  # Liste des données pour la mémoire et la navigation
    for cycle, data in enumerate(data_inputs):
        resultats = aire28.traiter_informations_memoire_et_navigation(data)
        print(f"Cycle {cycle + 1}: Données de mémoire et navigation = {data}, Résultats = {resultats}")

# Exécute la simulation
simulate_aire28()
