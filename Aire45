from NeuroneMoteur import NeuroneMoteur
from Synapse import Synapse
from FeedbackCircuit import FeedbackCircuit

class Aire45:
    def __init__(self, semantic_neuron_params, synapse_params, feedback_params):
        """
        Modélise l'aire 45, impliquée dans le traitement sémantique et la compréhension syntaxique.

        Parameters:
        semantic_neuron_params (dict): Paramètres pour les neurones impliqués dans la sémantique.
        synapse_params (dict): Paramètres pour les synapses.
        feedback_params (dict): Paramètres pour le circuit de feedback.
        """
        self.neurones_semantiques = [NeuroneMoteur(**semantic_neuron_params) for _ in range(130)]
        self.synapses = [Synapse(**synapse_params) for _ in range(130)]
        self.feedback_circuit = FeedbackCircuit(**feedback_params)

    def traiter_contenu_semantique(self, input_data):
        """
        Simule le traitement sémantique et le choix des mots dans l'aire 45.

        Parameters:
        input_data (float): Intensité des données sémantiques reçues.
        Returns:
        dict: Réponses des neurones sémantiques après traitement du contenu sémantique.
        """
        reponses = []
        for i, neurone in enumerate(self.neurones_semantiques):
            neurone.receive_input(input_data * 1.1)  # Modulation pour traitement sémantique
            response = neurone.activate()
            self.synapses[i].transmit(response)
            reponses.append(response)

        # Ajustement des réponses avec le circuit de feedback
        self.feedback_circuit.apply_feedback(any(reponses))
       
        return {
            "reponses_neurones_semantiques": reponses,
            "adjustment_feedback": self.feedback_circuit.apply_feedback(True)
        }

# Simulation de l'aire 45
def simulate_aire45():
    # Paramètres ajustables pour l'aire 45
    semantic_neuron_params = {"threshold": 1.0, "response_strength": 0.85}
    synapse_params = {"weight": 0.55, "neurotransmitter": "serotonine"}
    feedback_params = {"reinforcement_sensitivity": 0.35, "decay_factor": 0.1, "max_strength": 1.6}

    aire45 = Aire45(semantic_neuron_params, synapse_params, feedback_params)

    # Simuler des données sémantiques
    data_inputs = [0.9, 1.1, 0.8, 1.3, 1.0]  # Liste des données sémantiques et linguistiques
    for cycle, data in enumerate(data_inputs):
        resultats = aire45.traiter_contenu_semantique(data)
        print(f"Cycle {cycle + 1}: Données sémantiques = {data}, Résultats = {resultats}")

# Exécute la simulation
simulate_aire45()
